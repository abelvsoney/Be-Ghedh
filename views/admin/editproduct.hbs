<link href="//netdna.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//netdna.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
<!------ Include the above in your HEAD tag ---------->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.css">
<style>
  .clr {
    display: none;
  }
</style>

<form class="form-horizontal p-5" action="/admin/editproduct?id={{response._id}}" method="post" enctype="multipart/form-data">
<fieldset>

<center class="p-5"><h3 style="text-decoration: underline;">Edit Product</h3></center>

<center>

 <!-- Text input-->
<div class="form-group">
  <label class="col-md-4 control-label" for="brand_name">Brand</label>  
  <div class="col-md-4">
  <input id="brand_name" name="brand_name" value="{{response.brand_name}}" placeholder="{{brand_name}}" class="form-control input-md" required="" type="text" readonly>

  </div>
</div>


<!-- Text input-->
<div class="form-group">
  <label class="col-md-4 control-label" for="product_name">PRODUCT NAME</label>  
  <div class="col-md-4">
  <input id="product_name" name="product_name" value="{{response.product_name}}" placeholder="Product Name" class="form-control input-md" required="" type="text">
  </div>
</div>





<div class="form-group">
    <label for="category">Choose a category:</label>
    <select id="category" name="category">
        {{#each category}}
      <option value="{{this.categoryname}}">{{this.categoryname}}</option>
        {{/each}}
    </select>
</div>

<div class="form-group">
  <label class="col-md-4 control-label" for="brand_name">Size</label>  
  <div class="col-md-4">
  <input id="size" name="size" value="{{response.size}}" placeholder="{{response.size}}" class="form-control input-md" required="" type="text">

  </div>
</div>

<div class="form-group">
  <label class="col-md-4 control-label" for="brand_name">Color</label>  
  <div class="col-md-4">
  <input id="color" name="color" value="{{response.color}}" placeholder="{{response.color}}" class="form-control input-md" required="" type="text">

  </div>
</div>





<!-- Textarea -->
<div class="form-group">
  <label class="col-md-4 control-label" for="product_description">PRODUCT DESCRIPTION</label>
  <div class="col-md-4">                     
    <textarea class="form-control" id="product_description" name="product_description" required>{{response.product_description}}</textarea>
  </div>
</div>
   

<!-- Text input-->
<div class="form-group">
  <label class="col-md-4 control-label" for="available_quantity">QUANTITY</label>  
  <div class="col-md-4">
  <input id="quantity" name="quantity" value="{{response.quantity}}" placeholder="AVAILABLE QUANTITY" class="form-control input-md" required="" type="number">
    
  </div>
</div>  
<!-- Text input-->
<div class="form-group">
  <label class="col-md-4 control-label" for="available_quantity">Price</label>  
  <div class="col-md-4">
  <input id="price" name="price" value="{{response.price}}" placeholder="Price" class="form-control input-md" required="" type="number">
    
  </div>
</div>  


<div class="form-group">
  <label class="col-md-4 control-label" for="productoffer">Product Offer</label>  
  <div class="col-md-4">
  <input id="productoffer" name="productoffer" value="{{response.productoffer}}" placeholder="Product Offer(%)" class="form-control input-md" type="number" max=100 min=0>
    
  </div>
</div> 


<label for="">image</label><br />
{{!-- <img src="/ImageSite/{{response._id}}1.png" style="width:100px;height:auto" id="imgview"> --}}
<br>
<div id="crop">
  <img src="/ImageSite/{{response._id}}1.png" id="imgView1" alt="" style="height: 15%; width: 15%" class="" />
  <div class="vald-info" id="info"></div>
  <h5 class="error_form text-danger" id="image1_error_message"></h5>
  <div style="display: block">
    <div id="image-box1" class="image-container clr" style="height: 300px; width: 20%"></div>
    <button type="button" class="betaButton" id="crop-btn1" style="display: none;">
      Crop
    </button>
  </div>
</div>

<input type="file" name="image1" class="form-control" onchange="changeImg(event)" id="image1" /><br />

<label for="">image 2</label><br />
<div id="crop">
  <img id="imgView2" src="/ImageSite/{{response._id}}2.png" alt="" style="height: 15%; width: 15%" class="" />

  <div class="vald-info" id="info"></div>
  <h5 class="error_form text-danger" id="image2_error_message"></h5>
  <div style="display: block">
    <div id="image-box2" class="image-container clr" style="height: 300px; width: 20%"></div>
    <button type="button" class="betaButton" id="crop-btn2" style="display: none;">
      Crop
    </button>
  </div>
</div>
<input type="file" name="image2" class="form-control" onchange="changeImg2(event)" id="image2" /><br />

<label for="">image 3</label><br />
<div id="crop">
  <img id="imgView3" src="/ImageSite/{{response._id}}3.png" alt="" style="height: 15%; width: 15%" class="" />

  <div class="vald-info" id="info"></div>
  <h5 class="error_form text-danger" id="image3_error_message"></h5>
  <div style="display: block">
    <div id="image-box3" class="image-container clr" style="height: 300px; width: 20%"></div>
    <button type="button" class="betaButton" id="crop-btn3" style="display: none;">
      Crop
    </button>
  </div>
</div>


<input type="file" name="image3" class="form-control" onchange="changeImg3(event)" id="image3" /><br />

<div class="form-group">
  <label class="col-md-4 control-label" for="singlebutton"></label>
  <div class="col-md-4">
    <button type="submit" class="btn btn-primary">Save Changes</button>
  </div>
  </div>
</center>

</fieldset>
</form>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.js"></script>
<script>
  function changeImg(event) {
    //document.getElementById('imgview').src=URL.createObjectURL(event.target.files[0])
    document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
  }
  const imagebox1 = document.getElementById("image-box1");
  const crop_btn1 = document.getElementById("crop-btn1");
  const input1 = document.getElementById("image1");
  // When user uploads the image this event will get triggered
  input1.addEventListener("change", () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0];
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1);
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`;
    // Storing that cropping view image in a variable
    const image1 = document.getElementById("image1");
    // Displaying the image box
    document.getElementById("image-box1").style.display = "block";
    // Displaying the Crop buttton
    document.getElementById("crop-btn1").style.display = "block";
    // Hiding the Post button
    document.getElementById("imgView1").style.display = "block";
    const cropper1 = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    });
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener("click", () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper1.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById("image1");
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, {
          type: "image/*",
          lastModified: new Date().getTime(),
        });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById("imgView1").src = URL.createObjectURL(
          fileInputElement1.files[0]
        );
        // Hide the cropper box
        document.getElementById("image-box1").style.display = "none";
        // Hide the crop button
        document.getElementById("crop-btn1").style.display = "none";
      });
    });
  });
  ///////////////////////////////////////////////
  function changeImg2(event) {
    document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
  }
  const imagebox2 = document.getElementById("image-box2");
  const crop_btn2 = document.getElementById("crop-btn2");
  const input2 = document.getElementById("image2");
  // When user uploads the image this event will get triggered
  input2.addEventListener("change", () => {
    // Getting image file object from the input variable
    const img_data2 = input2.files[0];
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url2 = URL.createObjectURL(img_data2);
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`;
    // Storing that cropping view image in a variable
    const image2 = document.getElementById("image2");
    // Displaying the image box
    document.getElementById("image-box2").style.display = "block";
    // Displaying the Crop buttton
    document.getElementById("crop-btn2").style.display = "block";
    // Hiding the Post button
    document.getElementById("imgView2").style.display = "block";
    const cropper2 = new Cropper(image2, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    });
    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener("click", () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper2.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement2 = document.getElementById("image2");
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file2 = new File([blob], img_data2.name, {
          type: "image/*",
          lastModified: new Date().getTime(),
        });
        // Create a new container
        let container2 = new DataTransfer();
        // Add the cropped image file to the container
        container2.items.add(file2);
        // Replace the original image file with the new cropped image file
        fileInputElement2.files = container2.files;
        document.getElementById("imgView2").src = URL.createObjectURL(
          fileInputElement2.files[0]
        );
        // Hide the cropper box
        document.getElementById("image-box2").style.display = "none";
        // Hide the crop button
        document.getElementById("crop-btn2").style.display = "none";
      });
    });
  });
  /////////////////////////////////////
  function changeImg3(event) {
    document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
  }
  const imagebox3 = document.getElementById("image-box3");
  const crop_btn3 = document.getElementById("crop-btn3");
  const input3 = document.getElementById("image3");
  // When user uploads the image this event will get triggered
  input3.addEventListener("change", () => {
    // Getting image file object from the input variable
    const img_data3 = input3.files[0];
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url3 = URL.createObjectURL(img_data3);
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`;
    // Storing that cropping view image in a variable
    const image3 = document.getElementById("image3");
    // Displaying the image box
    document.getElementById("image-box3").style.display = "block";
    // Displaying the Crop buttton
    document.getElementById("crop-btn3").style.display = "block";
    // Hiding the Post button
    document.getElementById("imgView3").style.display = "block";
    const cropper3 = new Cropper(image3, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    });
    // When crop button is clicked this event will get triggered
    crop_btn3.addEventListener("click", () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper3.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement3 = document.getElementById("image3");
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file3 = new File([blob], img_data3.name, {
          type: "image/*",
          lastModified: new Date().getTime(),
        });
        // Create a new container
        let container3 = new DataTransfer();
        // Add the cropped image file to the container
        container3.items.add(file3);
        // Replace the original image file with the new cropped image file
        fileInputElement3.files = container3.files;
        document.getElementById("imgView3").src = URL.createObjectURL(
          fileInputElement3.files[0]
        );
        // Hide the cropper box
        document.getElementById("image-box3").style.display = "none";
        // Hide the crop button
        document.getElementById("crop-btn3").style.display = "none";
      });
    });
  });
</script>
